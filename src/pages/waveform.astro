---
import Tags from "../components/tags.astro";
import Layout from "../components/Layout.astro";
---
<Tags />
<style>
  canvas {
    width: 100%;
    height: 800px;
    border: 1px solid #2d2a2a;
  }
  #controls {
    margin-bottom: 10px;
    color: #d6d6d6;
  }
  #controls input,
  #controls button {
    border: 1px solid #2d2a2a;
    color: #d6d6d6;
    background-color: #110819;
  }
</style>
<div class="background-animation"></div>
<Layout>
<main>
  <div class="container mx-auto px-4 py-0 w-full">
    <div id="controls">
      <label for="fileInput">Upload .wav File:</label>
      <input type="file" id="fileInput" accept=".wav" />
      <label for="startTime">Start Time (s):</label>
      <input type="number" id="startTime" value="0" step="0.01" min="0" />
      <label for="endTime">End Time (s):</label>
      <input type="number" id="endTime" value="1" step="0.01" min="0" />
      <button id="drawButton">Draw Waveform Section</button>
    </div>
    <canvas id="canvas" width="3840" height="800"></canvas>
  </div>
</main>
</Layout>

<script>
  let audioBuffer: AudioBuffer | null = null;

  document
    .getElementById('fileInput')
    ?.addEventListener('change', function (event) {
      const target = event.target as HTMLInputElement;
      const file = target?.files?.[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = function (e) {
          const audioContext = new (window.AudioContext || window.webkitAudioContext)();
          if (e.target?.result) {
            audioContext.decodeAudioData(
              e.target.result as ArrayBuffer,
              function (buffer) {
                audioBuffer = buffer;
                alert('Audio file loaded successfully.');
              },
              function () {
                alert('Error decoding audio data.');
              },
            );
          }
        };
        reader.readAsArrayBuffer(file);
      } else {
        alert('Please upload a .wav file.');
      }
    });

  document
    .getElementById('drawButton')
    ?.addEventListener('click', function () {
      const startTimeElement = document.getElementById('startTime') as HTMLInputElement | null;
      const endTimeElement = document.getElementById('endTime') as HTMLInputElement | null;
      
      if (!startTimeElement || !endTimeElement) {
        return;
      }

      const startTime = parseFloat(startTimeElement.value);
      const endTime = parseFloat(endTimeElement.value);

      if (audioBuffer) {
        drawWaveformSection(audioBuffer, startTime, endTime);
      } else {
        alert('Please load an audio file first.');
      }
    });

  function drawWaveformSection(buffer: AudioBuffer, startTime: number, endTime: number) {
    const canvas = document.getElementById('canvas') as HTMLCanvasElement | null;
    if (!canvas) {
      return;
    }

    const ctx = canvas.getContext('2d');
    if (!ctx) {
      return;
    }

    const width = canvas.width;
    const height = canvas.height;
    const sampleRate = buffer.sampleRate;
    const startSample = Math.floor(startTime * sampleRate);
    const endSample = Math.floor(endTime * sampleRate);
    const data = buffer.getChannelData(0).slice(startSample, endSample);

    ctx.clearRect(0, 0, width, height);
    ctx.beginPath();
    ctx.strokeStyle = '#D6D6D6';
    const step = Math.ceil(data.length / width);
    const amp = height / 2;

    for (let i = 0; i < width; i++) {
      const slice = data.slice(i * step, (i + 1) * step);
      const min = Math.min(...slice);
      const max = Math.max(...slice);
      ctx.moveTo(i, (1 + min) * amp);
      ctx.lineTo(i, (1 + max) * amp);
    }
    ctx.stroke();
  }
</script>
