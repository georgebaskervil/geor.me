---
interface Props {
  title: string;
  publishedAt?: Date;
  description?: string;
  href: string;
  tags?: string[];
}

const { title, publishedAt, description, href, tags } = Astro.props;
---

<div class="latest-post-box homepage-box"></div>
  <a
    href={href}
    target={href.startsWith("http") ? "_blank" : "_self"}
    class="group flex items-center cursor-pointer gap-2 rounded-md border border-neutral p-4 transition-all duration-300 hover:-translate-y-1.5 hover:shadow-md"
    data-astro-prefetch
  >
    <div class="flex justify-between gap-3 flex-row items-start">
      <p class="font-semibold text-lg">{title}</p>
      {publishedAt && (
        <p class="font-normal text-primary hidden sm:inline">
          {new Date(publishedAt).toLocaleDateString("en-us", {
            year: "numeric",
            month: "numeric",
            day: "numeric",
          })}
        </p>
      )}
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="30"
        height="30"
        viewBox="0 0 24 24"
        fill="none"
        stroke="#94a0a9"
        stroke-linecap="round"
        stroke-linejoin="round"
        color="#94a0a9"
        class="tabler-icon tabler-icon-arrow-up-right transition-none md:transition-all md:duration-300 md:group-hover:translate-x-1"
      >
        <path d="M17 7l-10 10"></path>
        <path d="M8 7l9 0l0 9"></path>
      </svg>
    </div>
    {tags ? (
      <div class="pt-1 flex flex-row flex-wrap gap-2">
        {tags.map((item) => (
          <div class="badge badge-neutral">{item}</div>
        ))}
      </div>
    ) : (
      <p class="truncate">{description}</p>
    )}
  </a>
</div>
